<%- include('./partials/head.ejs') %>
<!--   -->
<% if (process.env.CURRENT_ENV ==="production") { %>
<script src="/vue/vue.global.prod.js"></script>
<% } else { %>
<script src="/vue/vue.global.js"></script>
<% } %>
<!--  -->

<link rel="stylesheet" href="/toast-notification/toast.css" />
<link href="/quill/dist/quill.snow.css" rel="stylesheet" />
<div id="app" class="max-w-5xl mx-auto mt-6 bg-white p-4">
	<div
		id="alert"
		class="mb-4 rounded-lg hidden bg-danger-100 px-6 py-5 text-base text-danger-70"
		role="alert"
		data-te-alert-init
		data-te-autohide="true"
		data-te-delay="4000"
	>
		A simple danger alertâ€”check it out!
	</div>
	<form data-te-validation-init data-te-active-validation="true" id="job-form">
		<div class="flex flex-wrap items-center justify-between gap-5">
			<!--job title input-->
			<div
				class="mb-6 flex-auto relative"
				data-te-input-wrapper-init
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="First name is required"
				data-te-valid-feedback=" "
			>
				<input name="title" type="job_title" value="<%= page === "edit-job"?
				JOB.title:"" %>" class="peer block min-h-[auto] w-full rounded border-0
				bg-transparent px-3 py-[0.32rem] leading-[1.6] outline-none
				transition-all duration-200 ease-linear focus:placeholder:opacity-100
				data-[te-input-state-active]:placeholder:opacity-100
				motion-reduce:transition-none dark:text-neutral-200
				dark:placeholder:text-neutral-200
				[&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
				id="job_title" aria-describedby="emailHelp" placeholder="Enter first
				name" />
				<label
					for="job_title"
					class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary"
					>Job title</label
				>
			</div>

			<!--job_category-->
			<div
				class="mb-6 flex-auto"
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<select
					class=""
					name="category_id"
					id="job-category"
					data-te-select-init
				>
					<option hidden selected></option>
					<option v-for="item in JOB_CAT" :value="item.id">
						{{ item.name }}
					</option>
				</select>
				<label data-te-select-label-ref>Category</label>
			</div>

			<!--employment_type-->
			<div
				class="mb-6 flex-auto"
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<select
					class=""
					name="employment_type"
					id="employment-type"
					data-te-select-init
				>
					<option hidden selected></option>
					<option v-for="item in SEL_DATA.employment_type" :value="item">
						{{ item }}
					</option>
				</select>
				<label data-te-select-label-ref>Job Type</label>
			</div>

			<div
				class="mb-6 flex-auto"
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<select
					class=""
					id="job-location-sel"
					name="job_location"
					data-te-select-init
				>
					<option hidden selected></option>
					<option v-for="item in ['Remote','on-site']" :value="item">
						{{ item }}
					</option>
				</select>
				<label data-te-select-label-ref>Job location</label>
			</div>

			<!-- min_quaification -->
			<div
				class="mb-6 flex-auto"
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<select
					class=""
					id="min-qual-sel"
					name="min_quaification"
					data-te-select-init
				>
					<option hidden selected></option>
					<option v-for="item in SEL_DATA.min_quaification" :value="item">
						{{ item }}
					</option>
				</select>
				<label data-te-select-label-ref>Minimum Qualification</label>
			</div>
			<!-- experience_level -->
			<div
				class="mb-6 flex-auto"
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<select
					class=""
					name="experience_level"
					id="experience-level"
					data-te-select-init
				>
					<option hidden selected></option>
					<option v-for="item in SEL_DATA.experience_level" :value="item">
						{{ item }}
					</option>
				</select>
				<label data-te-select-label-ref>Expirence Level</label>
			</div>

			<!-- expires_at -->
			<div
				class="mb-6 flex-auto relative"
				id="expiry_date-wrapper"
				data-te-input-wrapper-init
			>
				<!-- prettier-ignore -->
				<input
					type="date"
					id="expiry_date" 
          value="<%= page === "edit-job"?
           new Date(JOB.expires_at).toISOString().split('T')[0] : '' %>"
					class="peer block min-h-[auto] w-full rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
					placeholder="Select a date"
					name="expires_at"
				/><label
					for="expiry_date"
					class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] transition-all duration-200 ease-out -translate-y-[0.9rem] scale-[0.8] text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-primary"
					>Expiry date for offer</label
				>
			</div>

			<!-- state_location -->
			<div class="mb-6 flex-auto">
				<select
					class=""
					id="state-location"
					data-te-select-init
					name="state_location"
				>
					<option hidden selected></option>
					<option v-for="(state,i) in STATES" :id="i" :value="state.name">
						{{ state.name }}
					</option>
				</select>
				<label data-te-select-label-ref>State Address </label>
			</div>

			<!-- location_city -->
			<div class="mb-6 flex-auto">
				<select
					class=""
					id="city-location"
					data-te-select-init
					name="city_location"
				></select>
				<label data-te-select-label-ref> City Address</label>
			</div>
			<!-- min_salary -->
			<div
				class="mb-6 flex-auto relative"
				data-te-input-wrapper-init
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<input name="min_salary" type="number" min="1000" value="<%= page ===
				"edit-job"? JOB.min_salary:"" %>" class="peer block min-h-[auto] w-full
				rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6]
				outline-none transition-all duration-200 ease-linear
				focus:placeholder:opacity-100
				data-[te-input-state-active]:placeholder:opacity-100
				motion-reduce:transition-none dark:text-neutral-200
				dark:placeholder:text-neutral-200
				[&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
				id="min_salary" aria-describedby="emailHelp" placeholder="" />
				<label
					for="min_salary"
					class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary"
					>Minimum Salary</label
				>
			</div>
			<!-- max_salary -->
			<div
				class="mb-6 flex-auto relative"
				data-te-input-wrapper-init
				data-te-validate="input"
				data-te-validation-ruleset="isRequired|maxGreaterThanMin"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<input name="max_salary" type="number" min="1000" value="<%= page ===
				"edit-job" ? JOB.max_salary:"" %>" class="peer block min-h-[auto] w-full
				rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6]
				outline-none transition-all duration-200 ease-linear
				focus:placeholder:opacity-100
				data-[te-input-state-active]:placeholder:opacity-100
				motion-reduce:transition-none dark:text-neutral-200
				dark:placeholder:text-neutral-200
				[&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
				id="max_salary" aria-describedby="emailHelp" placeholder="" />
				<label
					for="max_salary"
					class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary"
					>Maximum Salary</label
				>
			</div>
			<!-- salary_period  -->
			<div
				class="mb-6 flex-auto"
				data-te-validate="input"
				data-te-validation-ruleset="isRequired"
				data-te-invalid-feedback="This is required"
				data-te-valid-feedback=" "
			>
				<select
					class=""
					id="salary-period"
					name="salary_period"
					data-te-select-init
				>
					<option hidden selected></option>
					<option v-for="item in SEL_DATA.salary_period" :value="item">
						{{ item }}
					</option>
				</select>
				<label data-te-select-label-ref>Salary Period</label>
			</div>
		</div>

		<!-- job summary -->
		<div class="mb-6 flex-1 relative" data-te-input-wrapper-init>
			<textarea
				class="peer block min-h-[auto] w-full rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
				id="summary"
				name="summary"
				rows="2"
				placeholder="Summaries your expectation for this job"
			></textarea>
			<label
				for="summary"
				class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary"
				>Job Summary</label
			>
		</div>
		<!-- job description  -->
		<label for="create-editor">Job Dscription</label>
		<div id="create-editor" class="border m-5">
			<% if (page === "edit-job") { %> <%- JOB.description_and_requirement %> <%
			} else { %>
			<h3><b>Requirements/Qualification</b></h3>
			<br /><br />
			<br />
			<h3><b>Required skills</b></h3>
			<ul>
				<li>...</li>
				<li>...</li>
			</ul>
			<br />
			<h3><b>Responsibilities</b></h3>
			<ul>
				<li>...</li>
				<li>...</li>
			</ul>
			<br />
			<h3><b>Benefits</b></h3>
			<ul>
				<li>...</li>
				<li>...</li>
			</ul>
			<br />

			<p><br /></p>
			<% } %>
		</div>
	</form>
	<div
		class="flex flex-shrink-0 flex-wrap items-center justify-end rounded-b-md border-t-2 border-neutral-100 border-opacity-100 p-4 dark:border-opacity-50"
	>
		<button
			class="inline-block rounded bg-danger-100 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-danger-700 transition duration-150 ease-in-out hover:bg-danger-accent-100 focus:bg-danger-accent-100 focus:outline-none focus:ring-0 active:bg-danger-accent-200"
			data-te-ripple-color="light"
		>
			Cancel
		</button>
		<button
			id="submit"
			@click="handleSubmit"
			type="button"
			class="ml-1 inline-block rounded bg-primary px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
			data-te-ripple-init
			data-te-ripple-color="light"
		>
			Save
		</button>
	</div>
</div>

<!-- vars -->
<script>
	const { createApp, onMounted, ref } = Vue;

	const msg = ref("testing");
	const description_and_requirement = ref("");
	const SEL_DATA = JSON.parse(`<%- JSON.stringify(DATA) %>`);
	const STATES = ref(JSON.parse(`<%- JSON.stringify(DATA.STATES) %>`));
	const JOB_CAT = JSON.parse(`<%- JSON.stringify(jobCategories) %>`);
</script>
<!-- methods -->
<% if (page === "edit-job") { %>
<script>
	async function handleSubmit(ev) {
		const url = `/api/job/<%= JOB.id %>`;
		const jobForm = document.querySelector("form#job-form");

		const delta = quill.getContents();
		const converter = new QuillDeltaToHtmlConverter(delta.ops, {});
		description_and_requirement.value = converter.convert();

		const formData = new FormData(jobForm);
		formData.set(
			"description_and_requirement",
			description_and_requirement.value
		);

		/**@type {{ok:true,message:string;details:{createdJob:{}}}|{ok:false;error:{message:string;details:{}}}} */
		const res = await (
			await fetch(url, { method: "put", body: formData })
		).json();

		if (!res.ok)
			return showToast({
				text: res.error.message,
				type: "error",
				duration: 10000,
			});
		showToast({ text: res.message, type: "success" });

		location.assign("/recruiter/jobs");
	}
</script>
<% } else { %>
<script>
	async function handleSubmit(ev) {
		const url = "/api/job";
		const jobForm = document.querySelector("form#job-form");

		const delta = quill.getContents();
		const converter = new QuillDeltaToHtmlConverter(delta.ops, {});
		description_and_requirement.value = converter.convert();

		const formData = new FormData(jobForm);
		formData.set(
			"description_and_requirement",
			description_and_requirement.value
		);

		/**@type {{ok:true,message:string;details:{createdJob:{}}}|{ok:false;error:{message:string;details:{}}}} */
		const res = await (
			await fetch(url, { method: "post", body: formData })
		).json();

		if (!res.ok)
			return showToast({
				text: res.error.message,
				type: "error",
				duration: 10000,
			});
		showToast({ text: res.message, type: "success" });

		location.assign("/recruiter/jobs");
	}
</script>
<% } %>

<!-- vue app -->
<script>
	createApp({
		setup() {
			onMounted(() => {});
			return {
				msg,
				SEL_DATA,
				JOB_CAT,
				handleSubmit,
				STATES,
			};
		},
	}).mount("#app");
</script>
<%- include('./partials/footer.ejs') %>
<script src="/quill/dist/quill.min.js"></script>
<script src="/quill-delta-to-html/dist/browser/QuillDeltaToHtmlConverter.bundle.js"></script>
<script>
	const quill = new Quill("#create-editor", {
		theme: "snow",
		placeholder: "",
	});
</script>
<script>
	const stateSelectInstance = te.Select.getInstance(
		document.querySelector("#state-location")
	);
	const citySelectInstance = te.Select.getInstance(
		document.querySelector("#city-location")
	);
	const job_categorySelectInstance = te.Select.getInstance(
		document.querySelector("#job-category")
	);
	const job_locationSelectInstance = te.Select.getInstance(
		document.querySelector("#job-location-sel")
	);
	const employment_typeSelectInstance = te.Select.getInstance(
		document.querySelector("#employment-type")
	);
	const min_quaificationSelectInstance = te.Select.getInstance(
		document.querySelector("#min-qual-sel")
	);
	const experience_levelSelectInstance = te.Select.getInstance(
		document.querySelector("#experience-level")
	);
	const salary_periodSelectInstance = te.Select.getInstance(
		document.querySelector("#salary-period")
	);

	stateSelectInstance._element.addEventListener("change", (e) => {
		console.log(e.target.value);
		citySelectInstance._element.innerHTML = STATES.value[
			e.target.selectedIndex
		].cities.map((city) => `<option value="${city}">${city}</option>`);
	});
	const jobForm = document.querySelector("form#job-form");

	const validForm = new te.Validation(jobForm, {
		submitCallback: async (e, valid) => {
			e.preventDefault();

			console.log(e);
			console.log(valid);
		},
		customErrorMessages: {
			contains: "The field must contain the '{contains}' word",
			maxGreaterThanMin: "Maximum salary must be greater than {min}",
		},
		customRules: {
			contains: (value, message, string) => {
				return value.includes(string)
					? true
					: message.replace("{contains}", string);
			},
			maxGreaterThanMin(value, message) {
				const min = jobForm.min_salary.value;
				return value > min ? true : message.replace("{min}", min);
			},
		},
	});
</script>

<% if (page === "edit-job") { %>
<script>
	stateSelectInstance.setValue("<%= JOB.state_location %>");
	citySelectInstance.setValue("<%= JOB.city_location %>");
	job_categorySelectInstance.setValue("<%= JOB.category.id %>");
	job_locationSelectInstance.setValue(
		"<%= JOB.is_remote ? 'Remote' : 'on-site' %>"
	);
	employment_typeSelectInstance.setValue("<%= JOB.employment_type %>");
	min_quaificationSelectInstance.setValue("<%= JOB.min_quaification %>");
	experience_levelSelectInstance.setValue("<%= JOB.experience_level %>");
	salary_periodSelectInstance.setValue("<%= JOB.salary_period %>");
	document.querySelector("textarea").value = "<%= JOB.summary %>";
</script>
<% } %>
