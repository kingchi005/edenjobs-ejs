// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @unique @default(cuid())
  username          String     @unique
  email             String     @unique
  first_name        String
  last_name         String
  password          String
  date_of_birth     DateTime
  gender            String
  address String
  is_applicant      Boolean?   @default(true)
  applicant_details Applicant? @relation(fields: [applicant_id], references: [id])
  applicant_id      String?    @unique
  employer_details  Employer?  @relation(fields: [employer_id], references: [id])
  employer_id       String?    @unique
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
}

model Applicant {
  id                  String        @unique @default(cuid())
  user                User?
  avatar              String
  job_field           String
  skill_set           String // an array
  qualifications      String //an array
  cv_resume_url       String
  years_of_experience Int
  skill_level         String
  preferred_job_type  String
  work_schedule       String
  job_stability       String
  location_type       String
  location            String
  applications        Application[]
  created_at          DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Employer {
  id                      String   @unique @default(cuid())
  user                    User?
  company_name            String   @unique
  company_email           String
  company_description     String
  company_location_state  String
  company_location_city   String
  company_location_street String
  company_logo            String
  company_website         String
  company_size            String
  industry                String
  culture                 String 
  jobs                    Job[]
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
}

model Job {
  id                          String        @unique @default(cuid())
  title                       String
  employment_type             String
  summary                     String
  description_and_requirement String
  min_quaification            String
  is_remote                   Boolean
  city_location               String
  state_location              String
  benefits                    String?
  expires_at                  DateTime
  required_experience_years   Int?
  experience_level            String
  required_skills             String?
  min_salary                  Int
  max_salary                  Int
  salary_period               String
  responsibilities            String?
  // is_deleted                  Boolean @default(false)
  category                    JobCategory   @relation(fields: [category_id], references: [id])
  category_id                 Int
  publisher                   Employer      @relation(fields: [publisher_id], references: [id])
  publisher_id                String
  applications                Application[] 
  published_at                DateTime      @default(now())
  created_at                  DateTime      @default(now())
  updated_at                  DateTime      @updatedAt
}

model JobCategory {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  jobs       Job[]
  created_at DateTime @default(now())
}

model Application {
  id           Int       @id @default(autoincrement())
  content      String
  // cv_resume String?
  job          Job       @relation(fields: [job_id], references: [id],onDelete: Cascade)
  job_id       String
  applicant    Applicant @relation(fields: [applicant_id], references: [id])
  invited      Boolean @default(false)
  applicant_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}
